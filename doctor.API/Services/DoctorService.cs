using System.Security.Cryptography;
using System.Text;
using AutoMapper;
using doctor.API.Interfaces;

public class DoctorService : IDoctorService
{
    private readonly IRepository<int, Doctor> _docRepo;
    private readonly IRepository<int, Department> _deptRepo;
    private readonly IRepository<int, User> _userRepo;
    private readonly IMapper _mapper;
    private readonly ILogger<Doctor> _logger;

    public DoctorService(IRepository<int, Doctor> docRepo,
                         IRepository<int, Department> deptRepo,
                         IMapper mapper,
                         IRepository<int, User> userRepo,
                         ILogger<Doctor> logger)
    {
        _docRepo = docRepo;
        _deptRepo = deptRepo;
        _userRepo = userRepo;
        _mapper = mapper;
        _logger = logger;
    }
    public async Task<AddDoctorResponseDto> AddNewDoctor(AddDoctorRequestDto doctor)
    {
        var dept = await _deptRepo.GetByKey(doctor.DepartmentId);
        if (dept == null)
            throw new Exception("Dept. not found");
        var doc = await _docRepo.GetByName(doctor.Name);
        if (doc != null)
            throw new Exception($"A Doctor with name {doctor.Name} in Dept. {dept.Name} already exists.");        
        var dbDoctor = _mapper.Map<Doctor>(doctor);
        if (dbDoctor.YearsOfExperience > 20)
            dbDoctor.IsSenior = true;
        dbDoctor = await _docRepo.Add(dbDoctor);
        _logger.LogInformation($"Doctor Added with Id {dbDoctor.Id}");

         User user = new User();
        user.UserId = dbDoctor.Id;
        user.Role = "Doctor";
        user = await PopulatePasswordAndKey(user);
        try
        {
            var dbUser = await _userRepo.Add(user);

        } catch (Exception ex) {
            throw;
        }

        var result = _mapper.Map<AddDoctorResponseDto>(dbDoctor);
        result.DepartmnetName = dept.Name;
        return result;
    }

    private async Task<User> PopulatePasswordAndKey(User user)
    {
        string defaulyAutoGeneratedPassword = "##" + user.UserId + "@@";
        HMACSHA256 hMACSHA256 = new HMACSHA256();
        user.Key = hMACSHA256.Key;
        user.Password = hMACSHA256.ComputeHash(Encoding.UTF8.GetBytes(defaulyAutoGeneratedPassword));
        return user;
    }

    public async Task<GetDoctorResponseDto> DeleteDoctor(int id)
    {
        var doc = await _docRepo.Delete(id);
        if (doc == null)
            throw new Exception($"Doctor not found with Key {id}");
        var res = _mapper.Map<GetDoctorResponseDto>(doc);
        res.DepartmentName = (await _deptRepo.GetByKey(doc.DepartmentId)).Name;
        return res;
    }

    public async Task<GetDoctorResponseDto> GetDoctorById(int id)
    {
        var doctor = await _docRepo.GetByKey(id);
        if (doctor == null)
            throw new Exception($"Employee not found with Key {id}");
        var res = _mapper.Map<GetDoctorResponseDto>(doctor);
        res.Seniority = GetSeniority(doctor.YearsOfExperience);        
        res.DepartmentName = (await _deptRepo.GetByKey(doctor.DepartmentId)).Name;
        return res;
    }

    public async Task<ICollection<GetDoctorResponseDto>> GetDoctors()
    {
        var doctors = await _docRepo.GetAll();
        if (doctors == null)
            throw new Exception("No Doctors found in the System");
        IList<GetDoctorResponseDto> result = new List<GetDoctorResponseDto>();
        foreach (var doc in doctors)
        {
            var res = _mapper.Map<GetDoctorResponseDto>(doc);
            res.Seniority = GetSeniority(doc.YearsOfExperience);        
            res.DepartmentName = (await _deptRepo.GetByKey(doc.DepartmentId)).Name;
            result.Add(res);
        }
        return result;
    }

    private string GetSeniority(int exp)
    {
        if (exp <= 10 && exp > 0)
            return "Junior";
        else if (exp > 10 && exp <= 20)
            return "Mid";
        else
            return "Senior";
    }

    public async Task<UpdateDoctorResponseDto> UpdateDoctor(int id, UpdateDoctorRequestDto doctor)
    {
        var dept = await _deptRepo.GetByKey(doctor.DepartmentId);
        if (dept == null)
            throw new Exception("Dept. not found");
        var dbDoctor = _mapper.Map<Doctor>(doctor);
        dbDoctor = await _docRepo.Update(id, dbDoctor);
        var result = _mapper.Map<UpdateDoctorResponseDto>(dbDoctor);
        result.DepartmnetName = dept.Name;

        return result;
    }
}